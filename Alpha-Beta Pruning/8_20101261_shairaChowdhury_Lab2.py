# -*- coding: utf-8 -*-
"""8_20101261_ShairaChowdhury.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n5_QlM2UAUY3stIG3mEICcOzK15XJhdf
"""

######## ALPHA BETA PRUNING ##########

import random

id = input("Enter your student ID: ")
hpRange = input("Minimum and Maximum value for the range of negative HP: ").split(" ")

depth = int(id[0])*2
branch = int(id[2])
hp = int((id[len(id)-1:len(id)-3:-1]))

leafNodesNum = branch**depth
leafNodes = []
for i in range(leafNodesNum):
  leafNodes.append(random.randint(int(hpRange[0]),int(hpRange[1])))

alpha = float("-inf")
beta = float("inf")


def attacker(alpha,beta,depth,branch,leafIndex,leafNodes):
  if depth == 0:
    return leafNodes[leafIndex]
  else:
    v = float("-inf")
    for i in range(branch):
      v1 = defender(alpha,beta,depth-1,branch,leafIndex*branch+i,leafNodes)
      if v1 >= v:
        v = v1
      if v1 >= beta:
        return v
      if v1 > alpha:
        alpha = v1
    return v 

def defender(alpha,beta,depth,branch,leafIndex,leafNodes):
  if depth == 0:
    return leafNodes[leafIndex]
  else:
    v = float("inf")
    for i in range(branch):
      v1 = attacker(alpha,beta,depth-1,branch,leafIndex*branch+i,leafNodes)
      if v1 <= v:
        v = v1
      if v1 <= alpha:
        return v
      if v1 < beta:
        beta = v1
    return v 

maxNHP = attacker(alpha,beta,depth,branch,0,leafNodes)

#print("result: ",maxNHP)

print(f"1.  Depth and Branches ratio is {depth}:{branch}")
print(f"2.  Terminal States (leaf node values) are {str(leafNodes)[1:-1]}.")
print(f"3.  Left life(HP) of the defender after maximum damage caused by the attacker is {hp - maxNHP}")